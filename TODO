1. Support brackets using the shunting yard algorithm. Perhaps there is a nice recursive solution using the existing ConvertToRPN function.
2. Support another operator, e.g. ^. This seems likely since 2^3 = 8 and (3+8)^2 = 121 (in the training game) -- but hang on, the ^ operator is right-associative.... Perhaps implement the modulo (%) or integer division (//, but this is two characters so maybe |) operator instead, since these are left-associative.
3. Support a single-integer answer
4. Ignore spaces in the input
5. Different way of dealing with invalid input (instead of deducting marks) or implement some other way of enhancing input validation, such as detecting divide by zero errors, perhaps by handling ZeroDivisionError.
6. Save game / high score, etc
7. Code a Queue class instead of using a list
8. Check that the result is an int instead of just converting it to int
9. Score one rather than all of the repeated targets (e.g. 23 in the training game)
10. Something to do with the difference between MaxTarget and MaxNumber in the normal game and training game
11. Regenerate the list of available numbers, perhaps at the cost of 1 point
12. Display a summary of the targets that were achieved, and how, at the end of the game.
13. Implement a "streak" bonus.
14. Implement "easy" and "hard" modes, in which the target range is adjusted.
15. Allow the user to choose the NumbersAllowed. They would have to be fixed for that game I think.
16. Adjust the score based on efficiency, by awarding more for using fewer operators.
17. For a small points cost, regenerate the NumbersAllowed or eliminate a particular target number.
18. Add support for negative numbers.
19. Implement a mode in which the potential operators are limited, for instance + and - only.
20. Support floating point numbers during calculation. At the moment, every result of a calculation is rounded down.
21. Calculate and display game statistics.
22. Add an option to restart or quit the game.